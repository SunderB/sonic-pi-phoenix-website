# This is a data file that contains information describing the text that is
# displayed on pages in the Lang section of Sonic Pi's help panel.

## Function name
## ====================
# A unique identifier for this function.
["set"]

## Function summary
## ====================
# A short phrase describing this Sonic Pi function.
summary = "Store information in the Time State"

## Function description
## ====================
# The detailed description of this function.
doc = '''
Store information in the Time State for the current time for either the current or any other thread. If called multiple times without an intervening call to `sleep`, `sync`, `set` or `cue`, the last value set will prevail. The value will remain in the Time State until overwritten by another call to `set`, or until Sonic Pi quits.

May be used within a `time_warp` to set past/future events. Does not affect time.
'''

## Function args
## ====================
# Args are the required parameters for the function. Each arg has two documented
# properties:
# - the arg's name
# - the arg's type (number, integer, symbol, ...).
# Example:
# (Repeat the following for every arg):
# [[chord.args]]
# name = "tonic"
# type = "symbol"

[["set".args]]
name = "time_state_key"
type = "default"

[["set".args]]
name = "value"
type = "anything"

## Function introduction
## ====================
# The label describing the version of Sonic Pi in which this function first appeared.
["set".introduced]
label = "Introduced in v3.0"

## Function options
## ====================
# The options are the optional parameters of this function.
# Each option has two documented properties:
# - the option's name
# - the option's description doc.
# Example:
# [chord.options]
# label = "Options"

# Now repeat the following for every option:
# [[chord.options.list]]
# name = "invert:"
# doc = '''
# Apply the specified num inversions to chord. See the fn `chord_invert`.
# '''

## Function examples
## ====================
# Each function may have one or more examples. If it has any, they are listed
# under an overall 'Example' or 'Examples' label (heading), and each example has
# a numbered sub-heading.
# Example:
# [chord.examples]
# label = "Example"
# label_plural = "Examples"

# Now repeat the following for every example:
# [[chord.examples.list]]
# label = "Example 1"
# example = '''
# puts (chord :e, :minor) # returns a ring of midi notes - (ring 64, 67, 71)
# '''
["set".examples]
label = "Example"
label_plural = "Examples"

[["set".examples.list]]
label = "Example 1"
example = '''

  set :foo, 1 #=> Stores the value 1 with key :foo
'''

[["set".examples.list]]
label = "Example 2"
example = '''

set :foo, 3  # Set :foo to 3
get[:foo] #=> returns 3
'''

[["set".examples.list]]
label = "Example 3"
example = '''

in_thread do
  set :foo, 3  # Set :foo to 3
end

in_thread do
  puts get[:foo]  #=> always returns 3 (no race conditions here!)
end

'''

