# This is a data file that contains information describing the text that is
# displayed on pages in the Lang section of Sonic Pi's help panel.

## Function name
## ====================
# A unique identifier for this function.
["look"]

## Function summary
## ====================
# A short phrase describing this Sonic Pi function.
summary = "Obtain value of a tick"

## Function description
## ====================
# The detailed description of this function.
doc = '''
Read and return value of default tick. If a `key` is specified, read the value of that specific tick. Ticks are `in_thread` and `live_loop` local, so the tick read will be the tick of the current thread calling `look`.
'''

## Function args
## ====================
# Args are the required parameters for the function. Each arg has two documented
# properties:
# - the arg's name
# - the arg's type (number, integer, symbol, ...).
# Example:
# (Repeat the following for every arg):
# [[chord.args]]
# name = "tonic"
# type = "symbol"

## Function introduction
## ====================
# The label describing the version of Sonic Pi in which this function first appeared.
["look".introduced]
label = "Introduced in v2.6"

## Function options
## ====================
# The options are the optional parameters of this function.
# Each option has two documented properties:
# - the option's name
# - the option's description doc.
# Example:
# [chord.options]
# label = "Options"

# Now repeat the following for every option:
# [[chord.options.list]]
# name = "invert:"
# doc = '''
# Apply the specified num inversions to chord. See the fn `chord_invert`.
# '''

["look".options]
label = "Options"

[["look".options.list]]
name = "offset:"
doc = '''
Offset to add to index returned. Useful when calling look on lists, rings and vectors to offset the returned value
'''

## Function examples
## ====================
# Each function may have one or more examples. If it has any, they are listed
# under an overall 'Example' or 'Examples' label (heading), and each example has
# a numbered sub-heading.
# Example:
# [chord.examples]
# label = "Example"
# label_plural = "Examples"

# Now repeat the following for every example:
# [[chord.examples.list]]
# label = "Example 1"
# example = '''
# puts (chord :e, :minor) # returns a ring of midi notes - (ring 64, 67, 71)
# '''
["look".examples]
label = "Example"
label_plural = "Examples"

[["look".examples.list]]
label = "Example 1"
example = '''

  puts look #=> 0
  puts look #=> 0
  puts look #=> 0 # look doesn't advance the tick, it just returns the current value
  
'''

[["look".examples.list]]
label = "Example 2"
example = '''

  puts look #=> 0 # A look is always 0 before the first tick
  tick # advance the tick
  puts look #=> 0 # Note: a look is still 0 after the first tick.
  tick
  puts look #=> 1
  puts look #=> 1 # making multiple calls to look doesn't affect tick value
  tick
  puts look #=> 2
  
'''

[["look".examples.list]]
label = "Example 3"
example = '''

  tick(:foo)
  tick(:foo)
  puts look(:foo) #=> 1 (keyed look :foo has been advanced)
  puts look #=> 0 (default look hasn't been advanced)
  puts look(:bar) #=> 0 (other keyed looks haven't been advanced either)
  
'''

[["look".examples.list]]
label = "Example 4"
example = '''

  # You can call look on lists and rings
  live_loop :foo do
    tick                                      # advance the default tick
    use_synth :beep
    play (scale :e3, :minor_pentatonic).look  # look into the default tick to play all notes in sequence
    sleep 0.5
    use_synth :square
    play (ring :e1, :e2, :e3).look, release: 0.25 # use the same look on another ring
    sleep 0.25
  end
  
'''

[["look".examples.list]]
label = "Example 5"
example = '''

# Returns numbers unchanged if single argument
puts look(0)     #=> 0
puts look(4)     #=> 4
puts look(-4)    #=> -4
puts look(20.3)  #=> 20.3
'''

