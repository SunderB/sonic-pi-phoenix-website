# This is a data file that contains information describing the text that is
# displayed on pages in the Lang section of Sonic Pi's help panel.

## Function name
## ====================
# A unique identifier for this function.
["with_swing"]

## Function summary
## ====================
# A short phrase describing this Sonic Pi function.
summary = "Add swing to successive calls to do/end block"

## Function description
## ====================
# The detailed description of this function.
doc = '''
Runs block within a `time_warp` except for once every `pulse` consecutive runs (defaulting to 4). When used for rhythmical purposes this results in one in every `pulse` calls of the block being 'on beat' and the rest shifted forward or backwards in time by `shift` beats.
'''

## Function args
## ====================
# Args are the required parameters for the function. Each arg has two documented
# properties:
# - the arg's name
# - the arg's type (number, integer, symbol, ...).
# Example:
# (Repeat the following for every arg):
# [[chord.args]]
# name = "tonic"
# type = "symbol"

[["with_swing".args]]
name = "shift"
type = "beats"

[["with_swing".args]]
name = "pulse"
type = "number"

[["with_swing".args]]
name = "tick"
type = "symbol"

## Function introduction
## ====================
# The label describing the version of Sonic Pi in which this function first appeared.
["with_swing".introduced]
label = "Introduced in v3.0"

## Function options
## ====================
# The options are the optional parameters of this function.
# Each option has two documented properties:
# - the option's name
# - the option's description doc.
# Example:
# [chord.options]
# label = "Options"

# Now repeat the following for every option:
# [[chord.options.list]]
# name = "invert:"
# doc = '''
# Apply the specified num inversions to chord. See the fn `chord_invert`.
# '''

["with_swing".options]
label = "Options"

[["with_swing".options.list]]
name = "shift:"
doc = '''
How much time to delay/forward the block. Greater values produce more emphasised swing. Defaults to 0.1 beats.
'''

[["with_swing".options.list]]
name = "pulse:"
doc = '''
How often to apply the swing. Defaults to 4.
'''

[["with_swing".options.list]]
name = "tick:"
doc = '''
A key for the tick with which to count pulses. Override this if you have more than one `with_swing` block in your `live_loop` or thread to stop them interfering with each other.
'''

[["with_swing".options.list]]
name = "offset:"
doc = '''
Count offset - before modding the count with the pulse size - integer offset to add to the result of calling `tick` with the specified tick key (via the `tick:` opt)
'''

## Function examples
## ====================
# Each function may have one or more examples. If it has any, they are listed
# under an overall 'Example' or 'Examples' label (heading), and each example has
# a numbered sub-heading.
# Example:
# [chord.examples]
# label = "Example"
# label_plural = "Examples"

# Now repeat the following for every example:
# [[chord.examples.list]]
# label = "Example 1"
# example = '''
# puts (chord :e, :minor) # returns a ring of midi notes - (ring 64, 67, 71)
# '''
["with_swing".examples]
label = "Example"
label_plural = "Examples"

[["with_swing".examples.list]]
label = "Example 1"
example = '''

live_loop :foo do
  with_swing 0.1 do
    sample :elec_beep      # plays the :elec_beep sample late except on the 1st beat of every 4
  end
  sleep 0.25
end

'''

[["with_swing".examples.list]]
label = "Example 2"
example = '''

live_loop :foo do
  with_swing -0.1 do
    sample :elec_beep      # plays the :elec_beep sample slightly early
  end                      # on the 1st beat of every 4
  sleep 0.25
end

'''

[["with_swing".examples.list]]
label = "Example 3"
example = '''

live_loop :foo do
  with_swing -0.1, pulse: 8 do
    sample :elec_beep      # plays the :elec_beep sample slightly early
  end                      #  on the 1st beat of every 8
  sleep 0.25
end

'''

[["with_swing".examples.list]]
label = "Example 4"
example = '''

# Use unique tick names if you plan on using with_swing
# more than once in any given live_loop or thread.
live_loop :foo do
  with_swing 0.14, tick: :a do
    sample :elec_beep      # plays the :elec_beep sample slightly late
  end                      #  on the 1st beat of every 4

  with_swing -0.1, tick: :b do
    sample :elec_beep, rate: 2  # plays the :elec_beep sample at double rate
  end                           #  slightly early except  on the 1st beat of every 4
  sleep 0.25
end
'''

[["with_swing".examples.list]]
label = "Example 5"
example = '''

live_loop :foo do
  with_swing 0.1 do
    cue :tick              # send out cue messages with swing timing
  end
  sleep 0.25
end

live_loop :bar do
  sync :tick
  sample :elec_beep       # sync on the swing cue messages to bring the swing into
                          # another live loop (sync will match the timing and clock of
                          # the sending live loop)
end

'''

[["with_swing".examples.list]]
label = "Example 6"
example = '''

live_loop :foo do
  with_swing 0.1, offset: 2 do
    sample :elec_beep      # plays the :elec_beep sample slightly late
  end                      # on the the 3rd beat of every 4
  sleep 0.25
end

'''

[["with_swing".examples.list]]
label = "Example 7"
example = '''

live_loop :foo do
  with_swing 0.1, pulse: 2, offset: 1 do
    sample :elec_beep      # plays the :elec_beep sample slightly late
  end                      # on the 2nd beat of every 2
  sleep 0.25
end

'''

