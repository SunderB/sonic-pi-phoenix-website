# This is a data file that contains information describing the text that is
# displayed on pages in the Lang section of Sonic Pi's help panel.

## Function name
## ====================
# A unique identifier for this function.
["synth"]

## Function summary
## ====================
# A short phrase describing this Sonic Pi function.
summary = "Trigger specific synth"

## Function description
## ====================
# The detailed description of this function.
doc = '''
Trigger specified synth with given opts. Bypasses `current_synth` value, yet still honours `current_synth_defaults`. When using `synth`, the note is no longer an explicit argument but an opt with the key `note:`.

If note: opt is `nil`, `:r` or `:rest`, play is ignored and treated as a rest. Also, if the `on:` opt is specified and returns `false`, or `nil` then play is similarly ignored and treated as a rest.

If the synth name is `nil` behaviour is identical to that of `play` in that the `current_synth` will determine the actual synth triggered.

If a block is given, it is assumed to take one arg which will be the controllable synth node and the body of the block is run in an implicit `in_thread`. This allows for asynchronous control of the synth without interfering with time. For synchronous control capture the result of `synth` as a variable and use that.

Note that the default opts listed are only a guide to the most common opts across all the synths. Not all synths support all the default opts and each synth typically supports many more opts specific to that synth. For example, the `:tb303` synth supports 45 unique opts. For a full list of a synth's opts see its documentation in the Help system. This can be accessed directly by clicking on the name of the synth and using the shortcut `C-i`
'''

## Function args
## ====================
# Args are the required parameters for the function. Each arg has two documented
# properties:
# - the arg's name
# - the arg's type (number, integer, symbol, ...).
# Example:
# (Repeat the following for every arg):
# [[chord.args]]
# name = "tonic"
# type = "symbol"

[["synth".args]]
name = "synth_name"
type = "symbol"

## Function introduction
## ====================
# The label describing the version of Sonic Pi in which this function first appeared.
["synth".introduced]
label = "Introduced in v2.0"

## Function options
## ====================
# The options are the optional parameters of this function.
# Each option has two documented properties:
# - the option's name
# - the option's description doc.
# Example:
# [chord.options]
# label = "Options"

# Now repeat the following for every option:
# [[chord.options.list]]
# name = "invert:"
# doc = '''
# Apply the specified num inversions to chord. See the fn `chord_invert`.
# '''

["synth".options]
label = "Options"

[["synth".options.list]]
name = "amp:"
doc = '''
The amplitude of the note
'''

[["synth".options.list]]
name = "amp_slide:"
doc = '''
The duration in beats for amplitude changes to take place
'''

[["synth".options.list]]
name = "pan:"
doc = '''
The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25
'''

[["synth".options.list]]
name = "pan_slide:"
doc = '''
The duration in beats for the pan value to change
'''

[["synth".options.list]]
name = "attack:"
doc = '''
Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.
'''

[["synth".options.list]]
name = "decay:"
doc = '''
Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).
'''

[["synth".options.list]]
name = "sustain:"
doc = '''
Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.
'''

[["synth".options.list]]
name = "release:"
doc = '''
Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.
'''

[["synth".options.list]]
name = "attack_level:"
doc = '''
Amplitude level reached after attack phase and immediately before decay phase
'''

[["synth".options.list]]
name = "decay_level:"
doc = '''
Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set
'''

[["synth".options.list]]
name = "sustain_level:"
doc = '''
Amplitude level reached after decay phase and immediately before release phase.
'''

[["synth".options.list]]
name = "env_curve:"
doc = '''
Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed
'''

[["synth".options.list]]
name = "slide:"
doc = '''
Default slide time in beats for all slide opts. Individually specified slide opts will override this value
'''

[["synth".options.list]]
name = "pitch:"
doc = '''
Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.
'''

[["synth".options.list]]
name = "on:"
doc = '''
If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated.
'''

## Function examples
## ====================
# Each function may have one or more examples. If it has any, they are listed
# under an overall 'Example' or 'Examples' label (heading), and each example has
# a numbered sub-heading.
# Example:
# [chord.examples]
# label = "Example"
# label_plural = "Examples"

# Now repeat the following for every example:
# [[chord.examples.list]]
# label = "Example 1"
# example = '''
# puts (chord :e, :minor) # returns a ring of midi notes - (ring 64, 67, 71)
# '''
["synth".examples]
label = "Example"
label_plural = "Examples"

[["synth".examples.list]]
label = "Example 1"
example = '''

use_synth :beep            # Set current synth to :beep
play 60                    # Play note 60 with opt defaults

synth :dsaw, note: 60    # Bypass current synth and play :dsaw
                         # with note 60 and opt defaults 
'''

[["synth".examples.list]]
label = "Example 2"
example = '''

synth :fm, note: 60, amp: 0.5 # Play note 60 of the :fm synth with an amplitude of 0.5
'''

[["synth".examples.list]]
label = "Example 3"
example = '''

use_synth_defaults release: 5
synth :dsaw, note: 50 # Play note 50 of the :dsaw synth with a release of 5
'''

[["synth".examples.list]]
label = "Example 4"
example = '''
# You can play chords with the notes: opt:
synth :dsaw, notes: (chord :e3, :minor)
'''

[["synth".examples.list]]
label = "Example 5"
example = '''

# on: vs if
notes = (scale :e3, :minor_pentatonic, num_octaves: 2)

live_loop :rhyth do
  8.times do
    trig = (spread 3, 7).tick(:rhyth)
    synth :tri, on: trig, note: notes.tick, release: 0.1  # Here, we're calling notes.tick
                                                          # every time we attempt to play the synth
                                                          # so the notes rise faster than rhyth2
    sleep 0.125
  end
end


live_loop :rhyth2 do
  8.times do
    trig = (spread 3, 7).tick(:rhyth)
    synth :saw, note: notes.tick, release: 0.1 if trig  # Here, we're calling notes.tick
                                                        # only when the spread says to play
                                                        # so the notes rise slower than rhyth
    sleep 0.125
  end
end

'''

[["synth".examples.list]]
label = "Example 6"
example = '''
 # controlling a synth synchronously
s = synth :beep, note: :e3, release: 4
sleep 1
control s, note: :e5
sleep 0.5
synth :dsaw, note: :e3   # This is triggered after 1.5s from start
'''

[["synth".examples.list]]
label = "Example 7"
example = '''
 # Controlling a synth asynchronously
synth :beep, note: :e3, release: 4 do |s|
  sleep 1                                               # This block is run in an implicit in_thread
  control s, note: :e5                                  # and therefore is asynchronous
end

sleep 0.5
synth :dsaw, note: :e3 # This is triggered after 0.5s from start
'''

