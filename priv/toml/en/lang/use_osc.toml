# This is a data file that contains information describing the text that is
# displayed on pages in the Lang section of Sonic Pi's help panel.

## Function name
## ====================
# A unique identifier for this function.
["use_osc"]

## Function summary
## ====================
# A short phrase describing this Sonic Pi function.
summary = "Set the default hostname and port number for outgoing OSC messages."

## Function description
## ====================
# The detailed description of this function.
doc = '''
Sets the destination host and port that `osc` will send messages to. If no port number is specified - will default to port 4560 (Sonic Pi's default OSC listening port).

OSC (Open Sound Control) is a simple way of passing messages between two separate programs on the same computer or even on different computers via a local network or even the internet. `use_osc` allows you to specify which computer (`hostname`) and program (`port`) to send messages to.

It is possible to send messages to the same computer by using the host name `'localhost'`.

This is a thread-local setting - therefore each thread (or live loop) can have their own separate `use_osc` values.

Note that calls to `osc_send` will ignore these values.


'''

## Function args
## ====================
# Args are the required parameters for the function. Each arg has two documented
# properties:
# - the arg's name
# - the arg's type (number, integer, symbol, ...).
# Example:
# (Repeat the following for every arg):
# [[chord.args]]
# name = "tonic"
# type = "symbol"

[["use_osc".args]]
name = "hostname"
type = "string"

[["use_osc".args]]
name = "port"
type = "number"

## Function introduction
## ====================
# The label describing the version of Sonic Pi in which this function first appeared.
["use_osc".introduced]
label = "Introduced in v3.0"

## Function options
## ====================
# The options are the optional parameters of this function.
# Each option has two documented properties:
# - the option's name
# - the option's description doc.
# Example:
# [chord.options]
# label = "Options"

# Now repeat the following for every option:
# [[chord.options.list]]
# name = "invert:"
# doc = '''
# Apply the specified num inversions to chord. See the fn `chord_invert`.
# '''

## Function examples
## ====================
# Each function may have one or more examples. If it has any, they are listed
# under an overall 'Example' or 'Examples' label (heading), and each example has
# a numbered sub-heading.
# Example:
# [chord.examples]
# label = "Example"
# label_plural = "Examples"

# Now repeat the following for every example:
# [[chord.examples.list]]
# label = "Example 1"
# example = '''
# puts (chord :e, :minor) # returns a ring of midi notes - (ring 64, 67, 71)
# '''
["use_osc".examples]
label = "Example"
label_plural = "Examples"

[["use_osc".examples.list]]
label = "Example 1"
example = '''
 # Send a simple OSC message to another program on the same machine

use_osc "localhost", 7000  # Specify port 7000 on this machine
osc "/foo/bar"             # Send an OSC message with path "/foo/bar"
                             # and no arguments

'''

[["use_osc".examples.list]]
label = "Example 2"
example = '''
 # Send an OSC message with arguments to another program on the same machine

use_osc "localhost", 7000        # Specify port 7000 on this machine
osc "/foo/bar" 1, 3.89, "baz"  # Send an OSC message with path "/foo/bar"
                                   # and three arguments:
                                   # 1) The whole number (integer) 1
                                   # 2) The fractional number (float) 3.89
                                   # 3) The string "baz"

'''

[["use_osc".examples.list]]
label = "Example 3"
example = '''
 # Send an OSC message with arguments to another program on a different machine

use_osc "10.0.1.5", 7000         # Specify port 7000 on the machine with address 10.0.1.5
osc "/foo/bar" 1, 3.89, "baz"  # Send an OSC message with path "/foo/bar"
                                   # and three arguments:
                                   # 1) The whole number (integer) 1
                                   # 2) The fractional number (float) 3.89
                                   # 3) The string "baz"

'''

[["use_osc".examples.list]]
label = "Example 4"
example = '''
 # use_osc only affects calls to osc until the next call to use_osc

use_osc "localhost", 7000  # Specify port 7000 on this machine
osc "/foo/bar"             # Send an OSC message to port 7000
osc "/foo/baz"             # Send another OSC message to port 7000

use_osc "localhost", 7005  # Specify port 7005 on this machine
osc "/foo/bar"             # Send an OSC message to port 7005
osc "/foo/baz"             # Send another OSC message to port 7005

'''

[["use_osc".examples.list]]
label = "Example 5"
example = '''
 # threads may have their own use_osc value

use_osc "localhost", 7000  # Specify port 7000 on this machine

live_loop :foo do
  osc "/foo/bar"             # Thread inherits outside use_osc values
  sleep 1                      # and therefore sends OSC messages to port 7000
end

live_loop :bar do
  use_osc "localhost", 7005  # Override OSC hostname and port for just this
                               # thread (live loop :bar). Live loop :foo is
                               # unaffected.

  osc "/foo/bar"             # Send OSC messages to port 7005
  sleep 1
end

use_osc "localhost", 7010  # Specify port 7010
osc "/foo/baz"             # Send another OSC message to port 7010
                             # Note that neither live loops :foo or :bar
                             # are affected (their use_osc values are
                             # independent and isolated.



'''

