# This is a data file that contains information describing the text that is
# displayed on pages in the Lang section of Sonic Pi's help panel.

## Function name
## ====================
# A unique identifier for this function.
["midi_clock_beat"]

## Function summary
## ====================
# A short phrase describing this Sonic Pi function.
summary = "Send a quarter-note's worth of MIDI clock ticks"

## Function description
## ====================
# The detailed description of this function.
doc = '''
Sends enough MIDI clock ticks for one beat to *all* connected MIDI devices. Use the `port:` opt to restrict which MIDI ports are used.

The MIDI specification requires 24 clock tick events to be sent per beat. These can either be sent manually using `midi_clock_tick` or all 24 can be scheduled in one go using this fn. `midi_clock_beat` will therefore schedule for 24 clock ticks to be sent linearly spread over duration beats. This fn will automatically take into account the current BPM and any `time_warp`s.

'''

## Function args
## ====================
# Args are the required parameters for the function. Each arg has two documented
# properties:
# - the arg's name
# - the arg's type (number, integer, symbol, ...).
# Example:
# (Repeat the following for every arg):
# [[chord.args]]
# name = "tonic"
# type = "symbol"

[["midi_clock_beat".args]]
name = "duration"
type = "beats"

## Function introduction
## ====================
# The label describing the version of Sonic Pi in which this function first appeared.
["midi_clock_beat".introduced]
label = "Introduced in v3.0"

## Function options
## ====================
# The options are the optional parameters of this function.
# Each option has two documented properties:
# - the option's name
# - the option's description doc.
# Example:
# [chord.options]
# label = "Options"

# Now repeat the following for every option:
# [[chord.options.list]]
# name = "invert:"
# doc = '''
# Apply the specified num inversions to chord. See the fn `chord_invert`.
# '''

["midi_clock_beat".options]
label = "Options"

[["midi_clock_beat".options.list]]
name = "port:"
doc = '''
MIDI port to send to
'''

[["midi_clock_beat".options.list]]
name = "on:"
doc = '''
If specified and false/nil/0 will stop the midi clock tick messages from being sent out. (Ensures all opts are evaluated in this call to `midi_clock_beat` regardless of value).
'''

## Function examples
## ====================
# Each function may have one or more examples. If it has any, they are listed
# under an overall 'Example' or 'Examples' label (heading), and each example has
# a numbered sub-heading.
# Example:
# [chord.examples]
# label = "Example"
# label_plural = "Examples"

# Now repeat the following for every example:
# [[chord.examples.list]]
# label = "Example 1"
# example = '''
# puts (chord :e, :minor) # returns a ring of midi notes - (ring 64, 67, 71)
# '''
["midi_clock_beat".examples]
label = "Example"
label_plural = "Examples"

[["midi_clock_beat".examples.list]]
label = "Example 1"
example = '''
midi_clock_beat #=> Send 24 clock ticks over a period of 1 beat to all connected MIDI devices
'''

[["midi_clock_beat".examples.list]]
label = "Example 2"
example = '''
midi_clock_beat 0.5 #=> Send 24 clock ticks over a period of 0.5 beats to all connected MIDI devices
'''

[["midi_clock_beat".examples.list]]
label = "Example 3"
example = '''
midi_clock_beat port: "moog_subphatty" #=> Send 24 clock ticks over a period of 1 beat to just the MIDI port with name moog_subphatty
'''

[["midi_clock_beat".examples.list]]
label = "Example 4"
example = '''

live_loop :clock do  # Create a live loop which continually sends out MIDI clock
  midi_clock_beat    # events at the current BPM
  sleep 1
end
'''

[["midi_clock_beat".examples.list]]
label = "Example 5"
example = '''
# Ensuring Clock Phase is Correct
live_loop :clock do
  midi_start if tick == 0 # Send a midi_start event the first time round the live loop only
  midi_clock_beat         # this will not just send a steady clock beat, but also ensure
  sleep 1                 # the clock phase of the MIDI device matches Sonic Pi.
end
'''

