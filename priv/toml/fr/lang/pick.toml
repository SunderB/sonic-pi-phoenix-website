# This is a data file that contains information describing the text that is
# displayed on pages in the Lang section of Sonic Pi's help panel.

## Function name
## ====================
# A unique identifier for this function.
["pick"]

## Function summary
## ====================
# A short phrase describing this Sonic Pi function.
summary = "Randomly pick from list (with duplicates)"

## Function description
## ====================
# The detailed description of this function.
doc = '''
Pick n elements from list or ring. Unlike shuffle, after each element has been picked, it is 'returned' to the list so it may be picked again. This means there may be duplicates in the result. If n is greater than the size of the ring/list then duplicates are guaranteed to be in the result.

If `n` isn't supplied it defaults to a size of 1.

If no arguments are given, will return a lambda function which when called takes an argument which will be a list to be picked from. This is useful for choosing random `onset:` vals for samples.

Always returns a list-like thing (either an array or ring)
'''

## Function args
## ====================
# Args are the required parameters for the function. Each arg has two documented
# properties:
# - the arg's name
# - the arg's type (number, integer, symbol, ...).
# Example:
# (Repeat the following for every arg):
# [[chord.args]]
# name = "tonic"
# type = "symbol"

[["pick".args]]
name = "list"
type = "array"

[["pick".args]]
name = "n"
type = "number_or_nil"

## Function introduction
## ====================
# The label describing the version of Sonic Pi in which this function first appeared.
["pick".introduced]
label = "Introduced in v2.10"

## Function options
## ====================
# The options are the optional parameters of this function.
# Each option has two documented properties:
# - the option's name
# - the option's description doc.
# Example:
# [chord.options]
# label = "Options"

# Now repeat the following for every option:
# [[chord.options.list]]
# name = "invert:"
# doc = '''
# Apply the specified num inversions to chord. See the fn `chord_invert`.
# '''

["pick".options]
label = "Options"

[["pick".options.list]]
name = "skip:"
doc = '''
Number of rands to skip over with each successive pick
'''

## Function examples
## ====================
# Each function may have one or more examples. If it has any, they are listed
# under an overall 'Example' or 'Examples' label (heading), and each example has
# a numbered sub-heading.
# Example:
# [chord.examples]
# label = "Example"
# label_plural = "Examples"

# Now repeat the following for every example:
# [[chord.examples.list]]
# label = "Example 1"
# example = '''
# puts (chord :e, :minor) # returns a ring of midi notes - (ring 64, 67, 71)
# '''
["pick".examples]
label = "Example"
label_plural = "Examples"

[["pick".examples.list]]
label = "Example 1"
example = '''

puts [1, 2, 3, 4, 5].pick(3) #=> [4, 4, 3]
'''

[["pick".examples.list]]
label = "Example 2"
example = '''

puts (ring 1, 2, 3, 4, 5).pick(3) #=> (ring 4, 4, 3)
'''

[["pick".examples.list]]
label = "Example 3"
example = '''

puts (ring 1, 2).pick(5) #=> (ring 2, 2, 1, 1, 1)
'''

[["pick".examples.list]]
label = "Example 4"
example = '''

puts (ring 1, 2, 3).pick #=> (ring 3)
'''

[["pick".examples.list]]
label = "Example 5"
example = '''

# Using pick for random sample onsets
live_loop :foo do
  sample :loop_amen, onset: pick   # pick a random onset value each time
  sleep 0.125
end
'''

