# This is a data file that contains information describing the text that is
# displayed on pages in the Lang section of Sonic Pi's help panel.

## Function name
## ====================
# A unique identifier for this function.
["osc"]

## Function summary
## ====================
# A short phrase describing this Sonic Pi function.
summary = "Send an OSC message (Open Sound Control)"

## Function description
## ====================
# The detailed description of this function.
doc = '''
Sends an OSC message to the current host and port specified by `use_osc` or `with_osc`.

OSC (Open Sound Control) is a simple way of passing messages between two separate programs on the same computer or even on different computers via a local network or even the internet. `osc` enables you to send well-timed OSC messages from within Sonic Pi. `osc` will ensure that the OSC message is sent at the correct time using the same timing system shared with the synthesis functionality via `sample`, `synth` and friends. `osc` even works seamlessly within `time_warp` - see examples.

A typical OSC message has two parts: a descriptive `path` which looks similar to a URL (website address), and an optional list of `arguments` that are either numbers or strings.

For example, a hypothetical synth program might accept this OSC message:

`/set/filter lowpass 80 0.5`

where `/set/filter` is the path, and `lowpass`, `80`, and `0.5` are three
arguments. This can be sent from within Sonic Pi by writing:

`osc '/set/filter', 'lowpass', 80, 0.5`

However, in order to send the OSC message you must first specify where to send it to. This is achieved by specifying both the host (the machine's internet address) and the port that the remote OSC server is listening on. This is configured using `use_osc` or `with_osc`. So, if our synth program was running on a machine on the local network with IP address `10.0.1.5` on port `5100` we could send our OSC message to it with the following:


`use_osc '10.0.1.5', 5100`

`osc '/set/filter', 'lowpass', 80, 0.5`


Note, by default, Sonic Pi listens for OSC messages on port `4560`, so you may send messages to an external machine running Sonic Pi if you know the IP address of that external machine. Any OSC messages received on port `4560` are automatically converted to standard cue events and displayed in the GUI's cue log. This also means that you can use `sync` to wait for the next incoming OSC message with a given path (see example).

Finally, it is also very useful to send OSC messages to other programs on the same computer. This can be achieved by specifying 'localhost' as the hostname and the port as normal (depending on which port the other program is listening on).

See `osc_send` for a version which allows you to specify the hostname and port directly (ignoring any values set via `use_osc` or `with_osc`).

For further information see the OSC spec: [http://opensoundcontrol.org/spec-1_0.html](http://opensoundcontrol.org/spec-1_0.html)

'''

## Function args
## ====================
# Args are the required parameters for the function. Each arg has two documented
# properties:
# - the arg's name
# - the arg's type (number, integer, symbol, ...).
# Example:
# (Repeat the following for every arg):
# [[chord.args]]
# name = "tonic"
# type = "symbol"

[["osc".args]]
name = "path"
type = "arguments"

## Function introduction
## ====================
# The label describing the version of Sonic Pi in which this function first appeared.
["osc".introduced]
label = "Introduced in v3.0"

## Function options
## ====================
# The options are the optional parameters of this function.
# Each option has two documented properties:
# - the option's name
# - the option's description doc.
# Example:
# [chord.options]
# label = "Options"

# Now repeat the following for every option:
# [[chord.options.list]]
# name = "invert:"
# doc = '''
# Apply the specified num inversions to chord. See the fn `chord_invert`.
# '''

## Function examples
## ====================
# Each function may have one or more examples. If it has any, they are listed
# under an overall 'Example' or 'Examples' label (heading), and each example has
# a numbered sub-heading.
# Example:
# [chord.examples]
# label = "Example"
# label_plural = "Examples"

# Now repeat the following for every example:
# [[chord.examples.list]]
# label = "Example 1"
# example = '''
# puts (chord :e, :minor) # returns a ring of midi notes - (ring 64, 67, 71)
# '''
["osc".examples]
label = "Example"
label_plural = "Examples"

[["osc".examples.list]]
label = "Example 1"
example = '''
 # Send a simple OSC message to another program on the same machine

use_osc "localhost", 7000  # Specify port 7000 on this machine
osc "/foo/bar"             # Send an OSC message with path "/foo/bar"
                             # and no arguments

'''

[["osc".examples.list]]
label = "Example 2"
example = '''
 # Send an OSC message with arguments to another program on the same machine

use_osc "localhost", 7000        # Specify port 7000 on this machine
osc "/foo/bar", 1, 3.89, "baz" # Send an OSC message with path "/foo/bar"
                                   # and three arguments:
                                   # 1) The whole number (integer) 1
                                   # 2) The fractional number (float) 3.89
                                   # 3) The string "baz"

'''

[["osc".examples.list]]
label = "Example 3"
example = '''
 # Send an OSC message with arguments to another program on a different machine

use_osc "10.0.1.5", 7000         # Specify port 7000 on the machine with address 10.0.1.5
osc "/foo/bar", 1, 3.89, "baz" # Send an OSC message with path "/foo/bar"
                                   # and three arguments:
                                   # 1) The whole number (integer) 1
                                   # 2) The fractional number (float) 3.89
                                   # 3) The string "baz"

'''

[["osc".examples.list]]
label = "Example 4"
example = '''
 # OSC messages honour the timing system

osc "/foo/bar"       # Send an OSC message with path /foo/bar at *exactly* the
play 60                # same time as note 60 is played

sleep 1                # Wait for 1 beat

osc "/baz/quux"       # Send an OSC message with path /baz/quux at *exactly* the
play 72                 # same time as note 72 is played

'''

[["osc".examples.list]]
label = "Example 5"
example = '''
 # Send a incrementing OSC counter

live_loop :foo do             # Start a live loop called :foo
  osc "/counter", tick      # Send an OSC message with the path /counter
                              # with successive whole numbers (0, 1, 2, 3.. etc.)
                              # each time round the live loop
  sleep 1                     # Repeat the live loop every 1 beat
end

'''

[["osc".examples.list]]
label = "Example 6"
example = '''
 # OSC messages can be sent from within time_warp

time_warp 0.5 do
  osc "/foo/bar"       # Send an OSC message with path /foo/bar at 0.5 beats
end

sleep 1                  # Wait for 1 beat

time_warp -0.1 do
  osc "/baz/quux"      # Send an OSC message with path /baz/quux at 0.9 beats
end

'''

